{"version":3,"sources":["apis/SDK.js","apis/IconexConnect.js","constants.js","components/ButtonComponent.js","components/InputComponent.js","utils.js","components/ListComponent.js","components/App.js","serviceWorker.js","index.js"],"names":["provider","HttpProvider","window","PROVIDER_URL","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","params","method","build","sendTxBuild","_ref2","_ref2$params","_ref2$networkId","networkId","NID","_ref2$stepLimit","stepLimit","_ref2$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","IconexConnect","getAddress","Promise","resolve","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","_event$detail2","result","constants","MODE","LOG_OUT","LOG_IN","SERVICE","label","ButtonComponent","buttonClick","style","background","border","borderRadius","color","height","padding","textTransform","width","react_default","a","createElement","Button","onClick","MyTextField","styled","TextField","marginLeft","marginRight","InputComponent","_this$props","this","props","inputData","setInputData","handleEncrypt","Fragment","display","flexWrap","margin","select","onChange","SelectProps","native","MenuProps","CONST","map","option","key","pw","marginTop","variant","Component","str2ab","str","buf","ArrayBuffer","bufView","Uint16Array","i","strLen","charCodeAt","CardItem","state","e","_this","setState","target","handleDecrypt","console","log","Uint8Array","slice","keyBuffer","decryptedBytes","aesjs","ModeOfOperation","ctr","Counter","decrypt","utils","hex","toBytes","encryptedData","decryptedText","utf8","fromBytes","split","_this$state","Card","marginBottom","CardActionArea","CardContent","Typography","gutterBottom","component","Number","CardActions","size","ListComponent","myKissList","className","item","ListComponent_CardItem","INITIAL_INPUT","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","name","objectSpread","defineProperty","_this$state$inputData","text","textBytes","encryptedBytes","encrypt","mode","asyncToGenerator","regenerator_default","mark","_callee","myAddress","wrap","_context","prev","next","sent","getKissList","stop","_callee2","txObj","_context2","CONTRACT_ADDRESS","encrypted_password","setTimeout","_callee3","_context3","execute","entries","JSON","parse","_this$state2","isLogOut","isEncrypted","textAlign","components_ButtonComponent","assign","InputComponent_InputComponent","disabled","ListComponent_ListComponent","withSnackbar","Boolean","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","ThemeProvider","maxSnack","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8edc6ee3.chunk.js","sourcesContent":["import IconService, {\n  HttpProvider,\n  IconBuilder,\n} from 'icon-sdk-js'\nimport config from '../config'\n\nconst provider = new HttpProvider(window.PROVIDER_URL)\nconst iconService = new IconService(provider)\n\nconst {\n  CallBuilder,\n  CallTransactionBuilder,\n} = IconBuilder;\n\nconst callBuild = ({\n  from,\n  methodName,\n  to,\n  params = {},\n} = {}) => {\n  const callBuilder = new CallBuilder();\n  const obj = callBuilder\n    .from(from)\n    .to(to)\n    .method(methodName)\n    .params(params)\n    .build();\n  return obj;\n};\n\nconst sendTxBuild = ({\n  from,\n  to,\n  methodName,\n  params = {},\n  networkId = window.NID,\n  stepLimit = '0x493e0',\n  value = '0x0',\n} = {}) => {\n  const callTransactionBuilder = new CallTransactionBuilder();\n  const obj = callTransactionBuilder\n    .nid(networkId)\n    .from(from)\n    .to(to)\n    .stepLimit(stepLimit)\n    .value(value)\n    .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n    .method(methodName)\n    .params(params)\n    .version('0x3')\n    .build();\n\n  return {\n    jsonrpc: '2.0',\n    method: 'icx_sendTransaction',\n    params: obj,\n    id: 1,\n  };\n};\n\nexport default {\n  iconService,\n  callBuild,\n  sendTxBuild,\n}","const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","export default {\n    'MODE': {\n        'LOG_OUT': 'LOG_OUT',\n        'LOG_IN': 'LOG_IN',\n    },\n    'SERVICE': [\n        {\n            value: '00',\n            label: 'Naver',\n        },\n        {\n            value: '01',\n            label: 'Google',\n        },\n        {\n            value: '02',\n            label: 'Facebook',\n        },\n        {\n            value: '03',\n            label: 'Amazon',\n        },\n        {\n            value: '04',\n            label: 'Instagram',\n        },\n        {\n            value: '05',\n            label: 'Daum',\n        },\n        {\n            value: '06',\n            label: 'Yahoo',\n        },\n        {\n            value: '07',\n            label: 'Twitter',\n        },\n        {\n            value: '08',\n            label: 'Nate',\n        },\n        {\n            value: '09',\n            label: 'Baidu',\n        },\n        {\n            value: '10',\n            label: 'Steam',\n        },\n        {\n            value: '11',\n            label: 'Origin',\n        },\n    ]\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CONST from '../constants'\n\nfunction ButtonComponent({ type, buttonClick }) {\n  let label = '', style = {}\n  switch(type) {\n    case 'LOG_IN': \n      label = 'Connect to ICONex'\n      style = {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        border: 0,\n        borderRadius: 30,\n        color: 'white',\n        height: 48, \n        padding: '8px 145px',\n        textTransform: 'none',\n        width: 440\n      }\n      break\n    case 'SENDTX':\n      label = 'Save Data'\n      style = {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        border: 0,\n        borderRadius: 30,\n        color: 'white',\n        height: 48, \n        padding: '8px 65px',\n        textTransform: 'none',\n        width: 292\n      }\n      break\n    default:\n      break;\n  }\n  return (\n    <Button \n      onClick={buttonClick}\n      style={style}>\n      {label}\n    </Button>\n  )\n}\n\nexport default ButtonComponent;\n","import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/styles';\nimport CONST from '../constants'\n\nconst MyTextField = styled(TextField)({\n  marginLeft: 8,\n  marginRight: 8,\n  width: 135,\n});\n\nexport default class InputComponent extends Component {\n  render() {\n    const { inputData, setInputData, handleEncrypt } = this.props\n\n    return (\n      <>\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          margin: '-8px 30px 11px'\n          }}>\n          <MyTextField\n            select\n            label=\"Service\"\n            value={inputData.label}\n            onChange={setInputData('label')}\n            SelectProps={{\n              native: true,\n              MenuProps: {\n                style: {\n                  width: 200\n                },\n              },\n            }}\n            margin=\"normal\">\n            {CONST.SERVICE.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </MyTextField>\n          <MyTextField\n            label=\"ID\"\n            value={inputData.id}\n            onChange={setInputData('id')}\n            margin=\"normal\"\n          />\n          <MyTextField\n            label=\"PW\"\n            value={inputData.pw}\n            onChange={setInputData('pw')}\n            margin=\"normal\"\n          />\n        </div>\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          margin: '-20px 30px 11px'\n        }}>\n          <MyTextField\n            label=\"Key\"\n            value={inputData.key}\n            onChange={setInputData('key')}\n            margin=\"normal\"\n          />\n          <Button \n            style={{\n              border: '1px white solid',\n              borderRadius: 30,\n              color: 'white',\n              height: 48,\n              padding: '8px 145px',\n              textTransform: 'none',\n              width: 240,\n              marginTop: 16,\n              marginLeft: 6\n            }}\n            onClick={handleEncrypt}\n            variant='outlined'\n            >Encrypt</Button>\n        </div>\n      </>\n    )\n  }\n}","function str2ab(str) {\n    var buf = new ArrayBuffer(str.length*2); \n    var bufView = new Uint16Array(buf);\n    for (var i=0, strLen=str.length; i<strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n  }\n\n  \n  export {\n    str2ab\n  }","import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { str2ab } from '../utils';\nimport CONST from '../constants'\n\n\nclass CardItem extends Component {\n    state = {\n        key: '',\n        result: ''\n    }\n\n    setInputData = (e) => {\n        this.setState({\n            key: e.target.value\n        })\n    }\n\n    handleDecrypt = () => {\n        console.log(new Uint8Array(str2ab(this.state.key)).slice(0, 16))\n        const keyBuffer = new Uint8Array(str2ab(this.state.key)).slice(0, 16)\n        const aesCtr2 = new window.aesjs.ModeOfOperation.ctr(keyBuffer, new window.aesjs.Counter(5));\n        const decryptedBytes = aesCtr2.decrypt(window.aesjs.utils.hex.toBytes(this.props.encryptedData));\n        const decryptedText = window.aesjs.utils.utf8.fromBytes(decryptedBytes);\n        this.setState({\n            result: `ID: ${decryptedText.split(' ')[0]} | PW: ${decryptedText.split(' ')[1]}`\n        })\n    }\n\n    render() {\n        const { label, encryptedData } = this.props \n        const { key, result } = this.state\n        return (\n            <Card style={{width: 800, marginBottom: 20}}>\n                <CardActionArea>\n                    <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {CONST.SERVICE[Number(label)].label}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {encryptedData}\n                    </Typography>\n                    </CardContent>\n                </CardActionArea>\n                <CardActions style={{padding: 14}}>\n                    {\n                        result ? (\n                            <TextField\n                                id=\"decrypt\"\n                                label=\"Result\"\n                                value={result}\n                                style={{\n                                    width: 680\n                                }}\n                                margin=\"none\"\n                            />\n                        ) : (\n                            <>\n                                <TextField\n                                    id=\"decrypt\"\n                                    label=\"Key\"\n                                    value={key}\n                                    style={{\n                                        width: 680\n                                    }}\n                                    onChange={this.setInputData}\n                                    margin=\"none\"\n                                />\n                                <Button onClick={this.handleDecrypt} size=\"small\" color=\"primary\">Decrypt</Button>\n                            </>\n                        )\n                    }\n                    \n                </CardActions>\n            </Card>\n        )\n    }\n}\n\n\nexport default class ListComponent extends Component {\n    render() {\n    const { myKissList } = this.props\n    return (\n        <section className=\"list fade-in\">\n        {\n            myKissList.map((item, i) => (\n                <CardItem key={i} label={item[0]} encryptedData={item[1]}  />\n            ))\n        }\n        </section>\n    )\n    }\n}\n","import React, { Component } from 'react'\nimport SDK from '../apis/SDK';\nimport { withSnackbar } from 'notistack';\nimport IconexConnect from '../apis/IconexConnect';\nimport ButtonComponent from './ButtonComponent';\nimport InputComponent from './InputComponent';\nimport ListComponent from './ListComponent';\nimport TextField from '@material-ui/core/TextField';\nimport CONST from '../constants';\nimport config from '../config';\nimport { str2ab } from '../utils';\n\nconst INITIAL_INPUT = {\n    id: 'ID',\n    pw: 'PW',\n    label: '00',\n    key: '',\n    encryptedData: ''\n  }\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mode: CONST.MODE['LOG_OUT'],\n      myAddress: '',\n      inputData: INITIAL_INPUT,\n      myKissList: []\n    }\n  }\n\n  setInputData = name => event => {\n    this.setState({\n      inputData: {\n        ...this.state.inputData,\n        [name]: event.target.value\n      }\n    })\n  };\n\n  handleEncrypt = () => {\n    const { id, pw, key } = this.state.inputData\n    const text = `${id} ${pw}`\n    const textBytes = window.aesjs.utils.utf8.toBytes(text);\n    const keyBuffer = new Uint8Array(str2ab(key)).slice(0, 16)\n    const aesCtr = new window.aesjs.ModeOfOperation.ctr(keyBuffer, new window.aesjs.Counter(5));\n    const encryptedBytes = aesCtr.encrypt(textBytes);\n    const encryptedData = window.aesjs.utils.hex.fromBytes(encryptedBytes);\n    this.setState({\n      inputData: {\n        ...this.state.inputData,\n        encryptedData\n      }\n    })\n  }\n\n  buttonClick = () => {\n    const { mode } = this.state\n    switch(mode) {\n      case CONST.MODE['LOG_OUT']: \n        this.getAddress()\n        break\n      case CONST.MODE['LOG_IN']:\n        this.sendTransaction()\n        break\n      default:\n        break;\n    }\n  }\n\n  getAddress = async () => {\n    const myAddress = await IconexConnect.getAddress()\n    this.setState({\n      mode: CONST.MODE['LOG_IN'],\n      myAddress,\n    }, () => {\n      this.getKissList()\n    })\n  }\n\n  sendTransaction = async () => {\n    const { sendTxBuild } = SDK\n    const { inputData, myAddress } = this.state\n    const { label, encryptedData } = inputData\n\n    const txObj = sendTxBuild({\n      from: myAddress,\n      to: window.CONTRACT_ADDRESS,\n      methodName: 'setKissInfo',\n      params: {\n        label,\n        encrypted_password: encryptedData\n      },\n    })\n    const tx = await IconexConnect.sendTransaction(txObj)\n    this.setState({\n      inputData: INITIAL_INPUT\n    }, () => {\n      setTimeout(() => {\n        this.getKissList()\n      }, 3000)\n    })\n  }\n\n  getKissList = async () => {\n    const { iconService, callBuild } = SDK\n    const { myAddress } = this.state\n    const myKissList = await iconService.call(\n      callBuild({\n        from: myAddress,\n        methodName: 'getAllKissInfos',\n        params: {},\n        to: window.CONTRACT_ADDRESS,\n      })\n    ).execute()\n\n    this.setState({\n      myKissList: Object.entries(JSON.parse(myKissList))\n    })\n  }\n\n  render() {\n    const { mode, inputData, myKissList } = this.state\n    console.log(myKissList)\n    const isLogOut = mode === CONST.MODE['LOG_OUT']\n    const isEncrypted = !!inputData.encryptedData\n    return (\n      <div className=\"App\">\n        <section className=\"main\">\n          <div className=\"wrapper\">\n            <p className=\"logo anton-400\">KISS</p>\n            <div style={{textAlign: 'center'}}>\n              {isLogOut\n                ? (<>\n                    <p className=\"desc roboto-slab\">Key Is Set on blockchain Safely</p>\n                    <ButtonComponent {...this.state} type=\"LOG_IN\" buttonClick={this.buttonClick} />\n                  </>)\n                : (<InputComponent {...this.state} setInputData={this.setInputData} handleEncrypt={this.handleEncrypt} /> )}\n            </div>\n          </div>\n          {isEncrypted && (\n            <div className=\"encrypt\">\n              <TextField\n                disabled\n                label=\"Encrypted string\"\n                value={inputData.encryptedData}\n                style={{\n                  width: 370,\n                  margin: '-4px 30px 0 0',\n                }}\n                margin=\"none\"\n                variant=\"outlined\"\n              />\n              <ButtonComponent {...this.state} type=\"SENDTX\" buttonClick={this.buttonClick} />\n            </div>\n          )}\n\n        </section>\n        { myKissList.length > 0 && (\n          <ListComponent { ...this.state } />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default withSnackbar(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { SnackbarProvider } from 'notistack';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#FE4365',\n    },\n    secondary: {\n      main: '#F9F9F9',\n    }\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <SnackbarProvider maxSnack={3}>\n      <App />\n    </SnackbarProvider>\n  </ThemeProvider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}